# docker-compose.yml - Fixed Cache Issues
# version: "3.8"

services:
  # Nginx - Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: agentic-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
    networks:
      - agentic-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      # cache_from را حذف کردید
    container_name: agentic-api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    environment:
      - ENV=${ENV:-development}
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - LLM_SERVICE_URL=${LLM_SERVICE_URL}
      - STT_SERVICE_URL=${STT_SERVICE_URL}
      - GPU_COORDINATOR_URL=${GPU_COORDINATOR_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - redis
      - postgres
      - llm-service
      - stt-service
      - gpu-coordinator
    volumes:
      - ./shared:/app/shared:ro
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LLM Service - Language Model Processing
  llm-service:
    build:
      context: ./services/llm-service
      dockerfile: Dockerfile
      # cache_from و args را حذف کردید
    container_name: agentic-llm-service
    ports:
      - "${LLM_SERVICE_PORT:-8002}:8002"
    environment:
      - ENV=${ENV:-development}
      - REDIS_URL=${REDIS_URL}
      - MODEL_PATH=${MODEL_PATH}
      - MODEL_NAME=${MODEL_NAME}
      - MAX_LENGTH=${MAX_LENGTH}
      - BATCH_SIZE=${BATCH_SIZE}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - GPU_COORDINATOR_URL=${GPU_COORDINATOR_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
    depends_on:
      - redis
      - gpu-coordinator
    volumes:
      - ./shared:/app/shared:ro
      - ./data/models/llm/gpt2-fa:/app/models/gpt2-fa:ro
      - ./data/cache:/app/data/cache
      - ./data/logs:/app/logs
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # STT Service - Speech to Text with Whisper
  stt-service:
    build:
      context: ./services/audio-service/stt
      dockerfile: Dockerfile
      # cache_from و args را حذف کردید
    container_name: agentic-stt-service
    ports:
      - "${STT_SERVICE_PORT:-8003}:8003"
    environment:
      - ENV=${ENV:-development}
      - REDIS_URL=${REDIS_URL}
      - WHISPER_MODEL_SIZE=${WHISPER_MODEL_SIZE}
      - WHISPER_MODEL_PATH=${WHISPER_MODEL_PATH}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS}
      - SUPPORTED_LANGUAGES=${SUPPORTED_LANGUAGES}
      - LOG_LEVEL=${LOG_LEVEL}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
      - GPU_COORDINATOR_URL=${GPU_COORDINATOR_URL}
      - CACHE_ENABLED=${CACHE_ENABLED}
      - CACHE_TTL=${CACHE_TTL}
    depends_on:
      - redis
      - gpu-coordinator
    volumes:
      - ./shared:/app/shared:ro
      - ./data/models/stt:/app/models
      - ./data/cache/stt:/app/cache
      - ./data/logs:/app/logs
      - ./data/uploads:/app/uploads
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1.5G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # GPU Coordinator - Manages shared GPU resources
  gpu-coordinator:
    build:
      context: ./services/gpu-coordinator
      dockerfile: Dockerfile
      # cache_from و args را حذف کردید
    container_name: agentic-gpu-coordinator
    ports:
      - "${GPU_COORDINATOR_PORT:-8080}:8080"
    environment:
      - ENV=${ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL}
      - MAX_MEMORY_MB=${MAX_MEMORY_MB}
      - SCHEDULER_INTERVAL=${SCHEDULER_INTERVAL}
      - HOST=${GPU_COORDINATOR_HOST:-0.0.0.0}
      - PORT=${GPU_COORDINATOR_PORT:-8080}
    volumes:
      - ./shared:/app/shared:ro
      - ./data/logs:/app/logs
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Test Service
  test-service:
    build:
      context: ./services/test-service
      dockerfile: Dockerfile
      # cache_from را حذف کردید
    container_name: agentic-test-service
    ports:
      - "${TEST_SERVICE_PORT:-8001}:8001"
    environment:
      - ENV=${ENV:-development}
      - REDIS_URL=${REDIS_URL}
      - LLM_SERVICE_URL=${LLM_SERVICE_URL}
      - STT_SERVICE_URL=${STT_SERVICE_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - GPU_COORDINATOR_URL=${GPU_COORDINATOR_URL}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - redis
      - llm-service
      - stt-service
      - api-gateway
      - gpu-coordinator
    volumes:
      - ./shared:/app/shared:ro
    networks:
      - agentic-network
    restart: unless-stopped

  # Redis - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: agentic-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - Main Database
  postgres:
    image: postgres:15-alpine
    container_name: agentic-postgres
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - agentic-network
    restart: unless-stopped

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - agentic-network
    restart: unless-stopped

networks:
  agentic-network:
    driver: bridge
    name: agentic-network

volumes:
  redis_data:
    name: agentic_redis_data
  postgres_data:
    name: agentic_postgres_data
  prometheus_data:
    name: agentic_prometheus_data
  grafana_data:
    name: agentic_grafana_data
