# version: "3.8"

services:
  # Nginx - Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: agentic-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
    networks:
      - agentic-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: agentic-api-gateway
    ports:
      - "8000:8000"
    environment:
      - ENV=development
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/agentic_db
      - LLM_SERVICE_URL=http://llm-service:8002
    depends_on:
      - redis
      - postgres
      - llm-service
    volumes:
      - ./services/api-gateway:/app
      - ./shared:/app/shared
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LLM Service - Language Model Processing
  llm-service:
    build:
      context: ./services/llm-service
      dockerfile: Dockerfile
    container_name: agentic-llm-service
    ports:
      - "8002:8002"
    environment:
      - ENV=development
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models/gpt2-fa
      - MODEL_NAME=gpt2-fa
      - MAX_LENGTH=512
      - BATCH_SIZE=1
    depends_on:
      - redis
    volumes:
      - ./services/llm-service:/app
      - ./shared:/app/shared
      - ./data/models/llm/gpt2-fa:/app/models/gpt2-fa:ro
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Test Service (برای تست کردن ارتباط)
  test-service:
    build:
      context: ./services/test-service
      dockerfile: Dockerfile
    container_name: agentic-test-service
    ports:
      - "8001:8001"
    environment:
      - ENV=development
      - REDIS_URL=redis://redis:6379
      - LLM_SERVICE_URL=http://llm-service:8002
    depends_on:
      - redis
      - llm-service
    volumes:
      - ./services/test-service:/app
      - ./shared:/app/shared
    networks:
      - agentic-network
    restart: unless-stopped

  # Redis - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: agentic-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - Main Database
  postgres:
    image: postgres:15-alpine
    container_name: agentic-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: agentic_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    networks:
      - agentic-network
    restart: unless-stopped

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - agentic-network
    restart: unless-stopped

networks:
  agentic-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
